===============================
0. Integer addition module
===============================

Import module:
==============
	>>> add_integer = __import__('0-add_integer').add_integer

Function:
=========
Write a function that adds two integers.

Operations:
===========
'a' and 'b' must be integer or float. Otherwise raise a TypeError Exception
with the message 'a must be an integer' or 'b must be an integer'.

Section // Non-Parameters:
==========================

Test case #0: A test case without parameters

	>>> add_integer()
	Traceback (most recent call last):
	TypeError: add_integer() missing 1 required positional argument: 'a'

Test case #1: A test case for an argument with no assigned value
	>>> add_integer(a, 123)
	Traceback (most recent call last):
	NameError: name 'a' is not defined

Test case #2: A test case for using the default value of parameter 'b'
	>>> add_integer(2)
	100

Test case #3: A test case for using the default value of parameter 'b'
		with the float parameter 'a'
	>>> add_integer(1.0)
	99

Section // Numbers:
===================

Test case #4: A test case between two integers
	>>> add_integer(5, 22)
	27

Test case #5: A test case between two floats
	>>> add_integer(10.2, 2.8)
	12

Test case #6: A test case between integer and float
	>>> add_integer(3, 5.2)
	8

Test case #7: A test case between float and integer
	>>> add_integer(4.8, 3)
	7

Test case #8: A test case between two negatives floats
	>>> add_integer(-3.0, -5.6)
	-8

Test case #9: A test case between float and negative integer
	>>> add_integer(5.3, -15)
	-10

Test case #10: A test case between integer and infinity float
	>>> add_integer(5, 1e400)
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

Test case #11: A test case between infinity float and negative integer
	>>> add_integer(1e400, -5)
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

Section // Non-Numbers:
=======================

Test case #12: A test case with the first parameter of type 'None'
	>>> add_integer(None, 4)
	Traceback (most recent call last):
	TypeError: a must be an integer

Test case #13: A test case with the second parameter of type 'None'
	>>> add_integer(5, None)
	Traceback (most recent call last):
	TypeError: b must be an integer

Test case #14: A test case with the first parameter of type 'list'
	>>> add_integer([1,2], 5)
	Traceback (most recent call last):
	TypeError: a must be an integer

Test case #15: A test case with the second parameter of type 'str'
	>>> add_integer(5, 'Holberton')
	Traceback (most recent call last):
	TypeError: b must be an integer

Test case #16: A test case with the first parameter of float NaN.
	>>> add_integer(float('nan'), 5)
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

Test case #17: A test case with the second parameter of float NaN.
        >>> add_integer(5, float('nan'))
        Traceback (most recent call last):
        ValueError: cannot convert float NaN to integer

Section // Types:
=================

Test case #18: A test case to check the returned integer type
	>>> type(add_integer(5, 5))
	<class 'int'>
